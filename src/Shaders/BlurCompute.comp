#version 440

const uint GAUSSIAN = 0;
const uint MOTION = 1;
const uint RADIAL = 2;

layout(local_size_x_id = 0, local_size_y_id = 1) in; // workgroup size defined with specialization constants. On cpp side there is associated SpecializationInfo entry in PipelineShaderStageCreateInfo
layout(push_constant) uniform Parameters {           // specify push constants. on cpp side its layout is fixed at PipelineLayout, and values are provided via vk::CommandBuffer::pushConstants()
   vec2 center;
   float angle;
   float sigma;
   float samples;
   float useAlpha;
   uint blurMode;
} params;

layout (binding = 0, rgba8) uniform readonly image2D inputImage;
layout (binding = 1, rgba8) uniform image2D resultImage;

vec4 gaussianBlur(ivec2 pixelCoords)
{
    const int kernelSize = 8;
    const float pi = 3.14159265f;
    const float numBlurPixelsPerSide = (kernelSize  /  2) * params.samples;
    
    vec3 incrementalGaussian;
    incrementalGaussian.x = 1.0f / (sqrt(2.0f * pi) * params.sigma);
    incrementalGaussian.y = exp(-0.5f / (params.sigma * params.sigma));
    incrementalGaussian.z = incrementalGaussian.y * incrementalGaussian.y;

    vec3 avgValue = vec3(0.0f, 0.0f, 0.0f);
    float coefficientSum = 0.0f;

    avgValue += imageLoad(inputImage, ivec2(pixelCoords.x, pixelCoords.y)).rgb  * incrementalGaussian.x;
    coefficientSum += incrementalGaussian.x;
    incrementalGaussian.xy *= incrementalGaussian.yz;

    // Horizontal
    for (float i = 1.0f; i <= numBlurPixelsPerSide; i++) 
    { 
        avgValue += imageLoad(inputImage, ivec2(pixelCoords.x - i * params.samples, pixelCoords.y)).rgb * incrementalGaussian.x;
        avgValue += imageLoad(inputImage, ivec2(pixelCoords.x + i * params.samples, pixelCoords.y)).rgb * incrementalGaussian.x;   
        coefficientSum += 2 * incrementalGaussian.x;
        incrementalGaussian.xy *= incrementalGaussian.yz;
    }

    // Vertical
    for (float i = 1.0f; i <= numBlurPixelsPerSide; i++) 
    { 
        avgValue += imageLoad(inputImage, ivec2(pixelCoords.x, pixelCoords.y - i * params.samples)).rgb * incrementalGaussian.y;
        avgValue += imageLoad(inputImage, ivec2(pixelCoords.x, pixelCoords.y + i * params.samples)).rgb * incrementalGaussian.y;   
        coefficientSum += 2 * incrementalGaussian.y;
        incrementalGaussian.xy *= incrementalGaussian.yz;
    }
    
    return vec4(avgValue / coefficientSum, 1.0);
}

vec4 motionBlur(ivec2 pixelCoords)
{
    vec4 color = imageLoad(inputImage, pixelCoords);  

    float wsum = 0.5;
    float radius = max(params.useAlpha, color.a) * params.sigma * 2.6412;
    vec2 dir = vec2(cos(params.angle), sin(params.angle));
    for (float dist = 1.0;  dist < radius;  dist += 1.0) 
    {
        float w = 1.0 - dist / radius;
        w = 1.0 - w * w;
        w = 1.0 - w * w;
        w = max(w, 0);
        color.rgb += w * (imageLoad(inputImage, ivec2(pixelCoords - dist * dir)).rgb + imageLoad(inputImage, ivec2(pixelCoords + dist * dir)).rgb);
        wsum += w;
    }
    
    return vec4(color.rgb / (wsum * 2.0), color.a);
}

vec4 radialBlur(ivec2 pixelCoords)
{
    vec4 color = vec4(0.0);
    float wsum = 0.0;
    ivec2 pos = pixelCoords - ivec2(params.center);
    for (float i = -params.samples;  i <= params.samples;  i += 1.0) {
        float dist = i / params.samples;
        float w = 1.0 - dist;
        w = 1.0 - w * w;
        w = 1.0 - w * w;
        w = max(w, 0);

        float a = params.angle * dist;
        float c = cos(a);
        float s = sin(a);
        color += imageLoad(inputImage, ivec2(mat2(c,-s,s,c) * pos + params.center)) * w;
        wsum += w;
    }
    return color / wsum;
}

void main()
{
   ivec2 pixelCoords = ivec2(gl_GlobalInvocationID.xy);

    vec4 pixel = vec4(1.0, 1.0, 1.0, 1.0);

    switch(params.blurMode)
    {
    case GAUSSIAN:
        pixel = gaussianBlur(pixelCoords);
        break;
    case MOTION:
        pixel = motionBlur(pixelCoords);
        break;
    case RADIAL:
        pixel = radialBlur(pixelCoords);
        break;
    }

    imageStore(resultImage, pixelCoords, pixel);
}