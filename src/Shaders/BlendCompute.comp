#version 440

const uint ADD = 0;
const uint SUBTRACT = 1;
const uint MULTIPLY = 2;
const uint DIVIDE = 3;
const uint SCREEN = 4;

layout(local_size_x_id = 0, local_size_y_id = 1) in; // workgroup size defined with specialization constants. On cpp side there is associated SpecializationInfo entry in PipelineShaderStageCreateInfo
layout(push_constant) uniform Parameters {           // specify push constants. on cpp side its layout is fixed at PipelineLayout, and values are provided via vk::CommandBuffer::pushConstants()
   uint BlendMode;
   uint Unused;
} params;

layout (binding = 0, rgba8) uniform readonly image2D leftImage;
layout (binding = 1, rgba8) uniform readonly image2D rightImage;
layout (binding = 2, rgba8) uniform image2D resultImage;

vec4 divide(vec4 top, vec4 bottom)
{
    return top / bottom;
}

vec4 multiply(vec4 top, vec4 bottom)
{
    return top * bottom;
}

vec4 screen(vec4 top, vec4 bottom)
{
    return 1-(1-top)*(1-bottom);
}

vec4 subtract(vec4 top, vec4 bottom)
{
    return vec4(top.xyz - bottom.xyz, 1.0);
}

vec4 add(vec4 top, vec4 bottom) //linear dodge
{
    return top + bottom;
}

void main()
{
   ivec2 pixelCoords = ivec2(gl_GlobalInvocationID.xy);

    vec4 rgbLeft = imageLoad(leftImage, pixelCoords).rgba;  
    vec4 rgbRight = imageLoad(rightImage, pixelCoords).rgba;  
    
    vec4 pixel = vec4(1.0, 1.0, 1.0, 1.0);

    switch(params.BlendMode)
    {
    case ADD:
        pixel = add(rgbLeft, rgbRight);
        break;
    case SUBTRACT:
        pixel = subtract(rgbLeft, rgbRight);
        break;
    case MULTIPLY:
        pixel = multiply(rgbLeft, rgbRight);
        break;
    case DIVIDE:
        pixel = divide(rgbLeft, rgbRight);
        break;
    case SCREEN:
        pixel = screen(rgbLeft, rgbRight);
        break;
    }

    imageStore(resultImage, pixelCoords, pixel);
}